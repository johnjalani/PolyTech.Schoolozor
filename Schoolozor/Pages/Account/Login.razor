@page "/Login"
@layout CleanLayout
@inject IClientUserService _clientUserService
@inject NavigationManager NavigationMgr
@inject IJSRuntime _js
@using Microsoft.AspNetCore.WebUtilities

@if (showLogin)
{
    <div class="row loginContainer">
        <div class="col-md-8 row">
            <div class="col-md-6">
                <img src="/images/Dino_Teacher.png" height="800" />
            </div>
            <div class="col-md-6">
                <h1 style="font-family: 'cavemanFont'; font-size: 6.5rem;">SCHOOLAZOR</h1>
            </div>
        </div>
        <div class="col-md-4">
            <EditForm Model="@user" OnValidSubmit="LoginUser">
                <DataAnnotationsValidator />
                <div class="row form-group">
                    <input class="form-control" type="text" @bind-value="user.Username" placeholder="UserName" />
                </div>
                <div class="row form-group">
                    <input class="form-control" type="password" @bind-value="user.Password" placeholder="Password" />
                </div>
                <div>

                </div>
                <div class="text-right">
                    <button type="submit" class="btn btn-primary">Login</button>
                    <a class="btn btn-success" href="register">Register</a>
                </div>
                <ValidationSummary />
                <br />
                <hr />
                <div class="text-right">
                    <a href="#">I'm a student / parent!</a>
                </div>

            </EditForm>
        </div>
    </div>
}
else
{
    <p>Roarr....</p>
}

@code {
    private string returnUrl = "";
    private bool showLogin = true;
    Credentials user = new Credentials();

    async Task LoginUser()
    {
        await _js.WriteToConsole($"Username is {user.Username}");
        var uri = NavigationMgr.ToAbsoluteUri(NavigationMgr.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param))
        {
            returnUrl = param.First();
        }
        Task<LoginResult> t = _clientUserService.LoginUser(user);
        showLogin = false;
        LoginResult lr = await t;
        if (string.IsNullOrEmpty(lr.Token))
        {
            showLogin = true;
        }
        else
        {
            if (string.IsNullOrEmpty(returnUrl))
            {
                NavigationMgr.NavigateTo("/");
            }
            else
            {
                NavigationMgr.NavigateTo(returnUrl);
            }
        }
    }
}
